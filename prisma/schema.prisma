datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // You can replace DATABASE_URL with the appropriate environment variable or hardcode the MongoDB URL here
}

generator client {
  provider = "prisma-client-js"
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  isActive   Boolean
  ExpiryData DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  imageUrl  String
  link      String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String      @unique
  imageUrl    String?
  isActive    Boolean
  description String?
  products    Product[]
  communities Community[]

  marketIds String[] @db.ObjectId
  markets   Market[] @relation("CategoryMarkets", fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  isActive    Boolean
  logoUrl     String?
  description String?

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation("CategoryMarkets", fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String   @unique
  imageUrl        String?
  isActive        Boolean
  isWholesale     Boolean
  description     String?
  sku             String?
  barcode         String?
  productCode     String
  unit            String
  wholesaleQty    Int
  oty             Int
  productStock    Int
  productPrice    Float
  wholeSalesPrice Float
  salePrice       Float
  tags            String[]

  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Community {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  isActive    Boolean
  slug        String    @unique
  title       String
  description String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String    @db.ObjectId

  content   String
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum UserRole {
  USER
  ADMIN
  FARMER
  MODERATOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?

  products Product[]

  role UserRole @default(USER)

  farmerProfile FarmerProfile?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model FarmerProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // slug               String   @unique
  name               String
  phone              String
  email              String
  physicalAddress    String?
  contactPerson      String?
  contactPersonPhone String?
  profileImageUrl    String?
  isActive           Boolean
  notes              String?
  terms              String?
  farmerUniqueCode   String
  products           String[]
  landSize           Float
  mainCrop           String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// USER=>ADIMIN, FARMER, CUSTOMER,AGENT

// model Category {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   slug        String    @unique
//   imageUrl    String?
//   isActive    Boolean
//   description String?
//   products    Product[]

//   marketIds String[] @db.objectId
//   markets   Market[] @relation(fields: [marketIds], references: [ids])

//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }

// model Market {
//   id          String  @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   slug        String  @unique
//   isActive    Boolean
//   logoUrl     String?
//   description String?

//   categoryIds String[]   @db.ObjectId
//   categories  Category[] @relation(fields: [categoryIds], references: [id])
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime?  @updatedAt
// }

// model Product {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   title      String    @unique
//   category   Category  @relation(fields: [categoryId], references: [id])
//   categoryId String    @db.ObjectId
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime? @updatedAt
// }
